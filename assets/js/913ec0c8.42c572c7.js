"use strict";(self.webpackChunkdeadcodes=self.webpackChunkdeadcodes||[]).push([[256],{5608:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>L,contentTitle:()=>a,default:()=>S,frontMatter:()=>c,metadata:()=>O,toc:()=>u});var t=o(7624),i=o(2172),s=(o(1504),o(3940)),d=o(9188),l=o(9460);o(9080);const r=JSON.parse('[{"date":"2024-10-27","title":"Release [2.0]","items":["Reworked - Breaking changes on update"]},{"date":"2023-11-10","title":"1.1","items":["Added Um"]},{"date":"2023-08-09","title":"Release [1.0]","items":["Release"]}]'),c={title:"Lodestones",description:"Lodestone Teleports",slug:"/lodestones"},a=void 0,O={id:"Libraries/lodestones/index",title:"Lodestones",description:"Lodestone Teleports",source:"@site/docs/Libraries/lodestones/index.md",sourceDirName:"Libraries/lodestones",slug:"/lodestones",permalink:"/lodestones",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Lodestones",description:"Lodestone Teleports",slug:"/lodestones"},sidebar:"libSidebar",previous:{title:"DeadAuras",permalink:"/dead-aura"},next:{title:"DeadUtils",permalink:"/dead-utils"}},L={},u=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Code",id:"code",level:2}];function E(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.c,{title:"Lodestones",version:"2024.01",skill:"Lodestone"}),"\n",(0,t.jsx)(n.admonition,{type:"hidden",children:(0,t.jsx)(n.h2,{id:"description",children:"Description"})}),"\n",(0,t.jsxs)(d.c,{title:"Description",children:[(0,t.jsx)(n.p,{children:"This module provides functionality for teleporting to various lodestones and checking the player's current location relative to these lodestones."}),(0,t.jsxs)(n.p,{children:["Each lodestone is represented as an object with ",(0,t.jsx)(n.code,{children:"Teleport"})," and ",(0,t.jsx)(n.code,{children:"IsAtLocation"})," methods."]}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Teleport"})," handles the teleportation process to the respective lodestone,\nwhile ",(0,t.jsx)(n.code,{children:"IsAtLocation"})," checks if the player is currently at the specified lodestone's location."]})]}),"\n",(0,t.jsx)(n.admonition,{type:"hidden",children:(0,t.jsx)(n.h2,{id:"usage",children:"Usage"})}),"\n",(0,t.jsxs)(d.c,{title:"Usage",children:[(0,t.jsx)(n.p,{children:"First, require this module in your script."}),(0,t.jsxs)(n.p,{children:["Then, use ",(0,t.jsx)(n.code,{children:"LODESTONES.<LODESTONE_NAME>.Teleport()"})," to teleport to a lodestone,"]}),(0,t.jsxs)(n.p,{children:["or ",(0,t.jsx)(n.code,{children:"LODESTONES.<LODESTONE_NAME>.IsAtLocation()"})," to check if you are at a specific lodestone."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'    local LODESTONES = require("lodestones")\n    LODESTONES.PORT_SARIM.Teleport()\n    local atPortSarim = LODESTONES.PORT_SARIM.IsAtLocation()\n'})})]}),"\n",(0,t.jsx)(n.admonition,{type:"hidden",children:(0,t.jsx)(n.h2,{id:"changelog",children:"Changelog"})}),"\n",(0,t.jsx)(l.c,{changes:r}),"\n",(0,t.jsx)(n.admonition,{type:"hidden",children:(0,t.jsx)(n.h2,{id:"code",children:"Code"})}),"\n",(0,t.jsx)(d.c,{title:"Code",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",metastring:"showLineNumbers",children:'--[[\n#Script Name:   <lodestones.lua>\n# Description:  <Functions to teleport to Lodestones>\n# Autor:        <Dead (dea.d - Discord)>\n# Version:      <2.0>\n# Datum:        <2024.10.27>\n\n# Description:  This module provides functionality for teleporting to various lodestones and checking the player\'s current location relative to these lodestones.\n                Each lodestone is represented as an object with \'Teleport\' and \'IsAtLocation\' methods.\n                \'Teleport\' handles the teleportation process to the respective lodestone,\n                while \'IsAtLocation\' checks if the player is currently at the specified lodestone\'s location.\n\n# Usage:        First, require this module in your script. \n                Then, use LODESTONES.<LODESTONE_NAME>.Teleport() to teleport to a lodestone, \n                or LODESTONES.<LODESTONE_NAME>.IsAtLocation() to check if you are at a specific lodestone.\n\n# Example:      local LODESTONES = require("lodestones")\n                LODESTONES.PORT_SARIM.Teleport()\n                local atPortSarim = LODESTONES.PORT_SARIM.IsAtLocation()\n]]\n\nlocal API = require("api")\nlocal LODESTONES = {}\n\n\nlocal function IsAtLodestone(lode)\n    local playerLoc = API.PlayerCoord()\n    local lodeLoc = lode.loc\n    local xDiff = math.abs(playerLoc.x - lodeLoc.x)\n    local yDiff = math.abs(playerLoc.y - lodeLoc.y)\n\n    return xDiff <= 20 and yDiff <= 20\nend\n\nlocal function SleepUntil(conditionFunc, timeout, message)\n    local startTime = os.time()\n    local sleepSuccessful = false\n    while not conditionFunc() do\n        if os.difftime(os.time(), startTime) >= timeout then\n            print("Stopped waiting for " .. message .. " after " .. timeout .. " seconds.")\n            break\n        end\n        if not API.Read_LoopyLoop() then\n            print("Script exited - breaking sleep.")\n            break\n        end\n        API.RandomSleep2(100, 100, 100)\n    end\n    if conditionFunc() then\n        print("Sleep condition met for " .. message)\n        sleepSuccessful = true\n    end\n    return sleepSuccessful\nend\n\nlocal function OpenLodestonesInterface()\n    if API.DoAction_Interface(0xffffffff, 0xffffffff, 1, 1465, 18, -1, API.OFF_ACT_GeneralInterface_route) then\n        SleepUntil(function() return API.Compare2874Status(30, false) end, 10, "Lodestone interface open")\n    end\nend\n\nlocal function GoToLodestone(lode)\n    if IsAtLodestone(lode) then\n        print("At lodestone area")\n        return true\n    end\n\n    print("Teleporting to lodestone")\n    if not API.Compare2874Status(30, false) then\n        OpenLodestonesInterface()\n    end\n    -- Lodestone interface is open. We shall teleport\n    if API.DoAction_Interface(0xffffffff, 0xffffffff, 1, 1092, lode.id, -1, API.OFF_ACT_GeneralInterface_route) then\n        if API.CheckAnim(200) then\n            print("Wait for anim complete")\n            if SleepUntil(function() return IsAtLodestone(lode) end, 20, "teleported to lodestone") then\n                SleepUntil(function() return API.ReadPlayerAnim() > 0 end, 10, "first anim check")\n                SleepUntil(function() return API.ReadPlayerAnim() == 0 end, 10, "second anim check")\n                print("finished waiting for teleport")\n                API.RandomSleep2(3000,100,100)\n                return true\n            end\n        end\n    end\n    return false\nend\n\nlocal function buildLodestone(id, loc)\n    return {\n        id = id,\n        loc = loc,\n        Teleport = function()\n            GoToLodestone({id = id, loc = loc})\n            return IsAtLodestone({id = id, loc = loc})\n        end,\n        IsAtLocation = function()\n            return IsAtLodestone({id = id, loc = loc})\n        end\n    }\nend\n\nLODESTONES.AL_KHARID = buildLodestone(11, WPOINT.new(3297, 3184, 0))\nLODESTONES.ANACHRONIA = buildLodestone(25, WPOINT.new(5431, 2338, 0))\nLODESTONES.ARDOUGNE = buildLodestone(12, WPOINT.new(2634, 3348, 0))\nLODESTONES.ASHDALE = buildLodestone(34, WPOINT.new(2474, 2708, 2))\nLODESTONES.BANDIT_CAMP = buildLodestone(9, WPOINT.new(2899, 3544, 0))\nLODESTONES.BURTHOPE = buildLodestone(13, WPOINT.new(2899, 3544, 0))\nLODESTONES.CANIFIS = buildLodestone(27, WPOINT.new(3517, 3515, 0))\nLODESTONES.CATHERBY = buildLodestone(14, WPOINT.new(2811, 3449, 0))\nLODESTONES.DRAYNOR_VILLAGE = buildLodestone(15, WPOINT.new(3105, 3298, 0))\nLODESTONES.EAGLES_PEAK = buildLodestone(28, WPOINT.new(2366, 3479, 0))\nLODESTONES.EDGEVILLE = buildLodestone(16, WPOINT.new(3067, 3505, 0))\nLODESTONES.FALADOR = buildLodestone(17, WPOINT.new(2967, 3403, 0))\nLODESTONES.FORT_FORINTHRY = buildLodestone(23, WPOINT.new(3298, 3525, 0))\nLODESTONES.FREMENNIK_PROVINCE = buildLodestone(29, WPOINT.new(2712, 3677, 0))\nLODESTONES.KARAMJA = buildLodestone(30, WPOINT.new(2761, 3147, 0))\nLODESTONES.LUNAR_ISLE = buildLodestone(10, WPOINT.new(2085, 3914, 0))\nLODESTONES.LUMBRIDGE = buildLodestone(18, WPOINT.new(3233, 3221, 0))\nLODESTONES.MENAPHOS = buildLodestone(24, WPOINT.new(3216, 2716, 0))\nLODESTONES.OOGLOG = buildLodestone(31, WPOINT.new(2532, 2871, 0))\nLODESTONES.PORT_SARIM = buildLodestone(19, WPOINT.new(3011, 3215, 0))\nLODESTONES.PRIFDDINAS = buildLodestone(35, WPOINT.new(2208, 3360, 1))\nLODESTONES.SEERS_VILLAGE = buildLodestone(20, WPOINT.new(2689, 3482, 0))\nLODESTONES.TAVERLEY = buildLodestone(21, WPOINT.new(2878, 3442, 0))\nLODESTONES.TIRANNWN = buildLodestone(32, WPOINT.new(2254, 3149, 0))\nLODESTONES.UM = buildLodestone(36, WPOINT.new(1084, 1768, 1))\nLODESTONES.VARROCK = buildLodestone(22, WPOINT.new(3214, 3376, 0))\nLODESTONES.WILDERNESS = buildLodestone(33, WPOINT.new(0, 0, 0))\nLODESTONES.YANILLE = buildLodestone(26, WPOINT.new(2560, 3094, 0))\n\nreturn LODESTONES\n'})})})]})}function S(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(E,{...e})}):E(e)}}}]);