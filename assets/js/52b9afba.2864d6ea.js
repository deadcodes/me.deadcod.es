"use strict";(self.webpackChunkdeadcodes=self.webpackChunkdeadcodes||[]).push([[841],{1920:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>h,contentTitle:()=>c,default:()=>p,frontMatter:()=>d,metadata:()=>u,toc:()=>f});var r=t(7624),i=t(2172),o=(t(1504),t(3940)),a=t(9188),l=t(9460);t(9080);const s=JSON.parse('[{"data":"2024-04-03","title":"Updates [3.0]","items":["Added UTILS.RUNES - List of runes with their ID and VB","Added UTILS.getRuneCountInventory() - Gives count of runes by type in inventory + rune pouches","Updated UTILS:gameStateChecks() to check multiple times before returning to handle lag","Updated UTILS.countTicks() - It now returns the number of ticks elapsed","Added UTILS.isWorldSelectionOpen()","Added UTILS.isCraftingInterfaceOpen()","Added UTILS.isChooseOptionInterfaceOpen()","Added UTILS.isCookingInterfaceOpen()","Added UTILS.isSmeltingInterfaceOpen()","Added UTILS.isTeleportSeedInterfaceOpen()","Added UTILS.isSkillQueued() - returns if a skill is queued","Added UTILS.canUseSkill() - returns if a skill can be used from action bar","Added UTILS.surge()","Added UTILS.dive()","Added UTILS.isPrayersTabOpen()","Added UTILS.isUsingCurses()","Added UTILS.isUsingNormalPrayers()","Added UTILS.isUsingNormalMagic()","Added UTILS.isUsingAncientMagic()","Added UTILS.isUsingLunarMagic()","Added UTILS.isSoulSplitting()","Added UTILS.isDeflectMelee()","Added UTILS.isDeflectMagic()","Added UTILS.isDeflectRange()","Added UTILS.isDeflectNecro()","Added UTILS.togglePrayerWindow() - opens/closes the prayers UI","Added UTILS.getFamiliarDuration()","Added UTILS.isChronicleAttractionActive()","Added UTILS.hasChronicleAttraction() - checks if Chronicle attraction prayer is available","Added UTILS.playerInArea() - Supports passing a polygon of WPOINTs","Added UTILS.isCoordInArea()","Added UTILS.NoteItem()"]},{"date":"2024-01-31","title":"Reworked [2.0]","items":["Added UTILS.ORES - List of ores with their ID","Added UTILS:antiIdle()","Added UTILS:gameStateChecks()","Added UTILS.CanUseLodestone()","Added UTILS.getDistinctByProperty()","Added UTILS.LoadActionBar()","Added UTILS.getSkillOnBar()","Added UTILS.countTicks()","Added UTILS.rangeSleep()","Added UTILS.SleepUntil()","Added UTILS.SleepUtilWithoutChecks()","Added UTILS.getAmountInOrebox()"]},{"date":"2024-01-20","title":"Release [1.0]","items":["Release"]}]'),d={title:"DeadUtils",description:"Utility Functions",slug:"/dead-utils"},c=void 0,u={id:"Libraries/utils/index",title:"DeadUtils",description:"Utility Functions",source:"@site/docs/Libraries/utils/index.md",sourceDirName:"Libraries/utils",slug:"/dead-utils",permalink:"/dead-utils",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"DeadUtils",description:"Utility Functions",slug:"/dead-utils"},sidebar:"libSidebar",previous:{title:"Lodestones",permalink:"/lodestones"}},h={},f=[{value:"Usage",id:"usage",level:2},{value:"Changelog",id:"changelog",level:2},{value:"Functions",id:"functions",level:2},{value:"<code>antiIdle</code>",id:"antiidle",level:3},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"<code>randomSleep</code>",id:"randomsleep",level:3},{value:"<code>gameStateChecks</code>",id:"gamestatechecks",level:3},{value:"<code>CanUseLodestone</code>",id:"canuselodestone",level:3},{value:"<code>waitForPlayerAtCoords</code>",id:"waitforplayeratcoords",level:3},{value:"<code>concatenateTables</code>",id:"concatenatetables",level:3},{value:"<code>getDistinctValues</code>",id:"getdistinctvalues",level:3},{value:"<code>getDistinctByProperty</code>",id:"getdistinctbyproperty",level:3},{value:"<code>DO_RandomEvents</code>",id:"do_randomevents",level:3},{value:"<code>LoadActionBar</code>",id:"loadactionbar",level:3},{value:"<code>getSkillOnBar</code>",id:"getskillonbar",level:3},{value:"<code>countTicks</code>",id:"countticks",level:3},{value:"<code>rangeSleep</code>",id:"rangesleep",level:3},{value:"<code>SleepUntil</code>",id:"sleepuntil",level:3},{value:"<code>SleepUtilWithoutChecks</code>",id:"sleeputilwithoutchecks",level:3},{value:"<code>getAmountInOrebox</code>",id:"getamountinorebox",level:3},{value:"Code",id:"code",level:2}];function I(n){const e={admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.M)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.c,{title:"Dead Utils",version:"2024.04"}),"\n",(0,r.jsx)(e.admonition,{type:"hidden",children:(0,r.jsx)(e.h2,{id:"usage",children:"Usage"})}),"\n",(0,r.jsx)(a.c,{title:"Usage",children:(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",children:'local UTILS = require("utils")\nUTILS:antiIdle()\n'})})}),"\n",(0,r.jsx)(e.admonition,{type:"hidden",children:(0,r.jsx)(e.h2,{id:"changelog",children:"Changelog"})}),"\n",(0,r.jsx)(l.c,{changes:s}),"\n",(0,r.jsx)(e.admonition,{type:"hidden",children:(0,r.jsx)(e.h2,{id:"functions",children:"Functions"})}),"\n",(0,r.jsxs)(a.c,{title:"Functions",children:[(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"antiidle",children:(0,r.jsx)(e.code,{children:"antiIdle"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"The anti idle function we've all been using"}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"isempty",children:(0,r.jsx)(e.code,{children:"isEmpty"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["s ",(0,r.jsx)(e.code,{children:"string"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Function to tell if a string is empty"}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"randomsleep",children:(0,r.jsx)(e.code,{children:"randomSleep"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["milliseconds ",(0,r.jsx)(e.code,{children:"number"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Sleeps to a random duration"}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"gamestatechecks",children:(0,r.jsx)(e.code,{children:"gameStateChecks"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Checks for the following"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"If we're logged in"}),"\n",(0,r.jsx)(e.li,{children:"If script is looping"}),"\n"]}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"canuselodestone",children:(0,r.jsx)(e.code,{children:"CanUseLodestone"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Checks if we can use a lodestone\nAfter exiting combat, you can use a lodestone for a specific duration."}),"\n",(0,r.jsx)(e.p,{children:"This method tells you when you can use a lodestone"}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"waitforplayeratcoords",children:(0,r.jsx)(e.code,{children:"waitForPlayerAtCoords"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["coords ",(0,r.jsx)(e.code,{children:"WPOINT"})]}),"\n",(0,r.jsxs)(e.li,{children:["threshold ",(0,r.jsx)(e.code,{children:"number"})]}),"\n",(0,r.jsxs)(e.li,{children:["maxWaitInSeconds ",(0,r.jsx)(e.code,{children:"number"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Wait for a player to reach a coords within a threshold, upto defined seconds"}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"concatenatetables",children:(0,r.jsx)(e.code,{children:"concatenateTables"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"comma seperated list of tables to concatenate"}),"\n"]}),"\n"]}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Returns a new table combining all the input tables"}),"\n"]}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",metastring:'title="Example" showLineNumbers',children:"local ITEMS = {}\n\nITEMS.COMMON = {\n    995 -- gold coins\n}\n\nITEMS.RUNES = {\n    554, -- fire\n    555, -- water\n    556, -- air\n    557 -- earth\n}\n--highlight-next-line\nlocal lootableItems = UTILS.concatenateTables(ITEMS.COMMON, ITEMS.RUNES)\n\n"})}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"getdistinctvalues",children:(0,r.jsx)(e.code,{children:"getDistinctValues"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["inputTable ",(0,r.jsx)(e.code,{children:"table"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Returns a table with unique values"}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"getdistinctbyproperty",children:(0,r.jsx)(e.code,{children:"getDistinctByProperty"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["inputTable ",(0,r.jsx)(e.code,{children:"table"})]}),"\n",(0,r.jsxs)(e.li,{children:["property ",(0,r.jsx)(e.code,{children:"string"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Returns a table with unique elements based on the provided property"}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"do_randomevents",children:(0,r.jsx)(e.code,{children:"DO_RandomEvents"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Handles the following random events"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["18204 ",(0,r.jsx)(e.code,{children:"Chronicle fragment"}),", 18205 ",(0,r.jsx)(e.code,{children:"other peoples"})]}),"\n",(0,r.jsxs)(e.li,{children:["19884 ",(0,r.jsx)(e.code,{children:"Guthix butterfly"})]}),"\n",(0,r.jsxs)(e.li,{children:["26022 ",(0,r.jsx)(e.code,{children:"Seren spirit"})]}),"\n",(0,r.jsxs)(e.li,{children:["27228 ",(0,r.jsx)(e.code,{children:"Divine blessing"})]}),"\n",(0,r.jsxs)(e.li,{children:["27297 ",(0,r.jsx)(e.code,{children:"Forge phoenix"})]}),"\n",(0,r.jsxs)(e.li,{children:["28411 ",(0,r.jsx)(e.code,{children:"Catalyst"})]}),"\n",(0,r.jsxs)(e.li,{children:["30599 ",(0,r.jsx)(e.code,{children:"Halloween Pumpkin"})]}),"\n",(0,r.jsxs)(e.li,{children:["15451 ",(0,r.jsx)(e.code,{children:"Fire spirit"})]}),"\n"]}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"loadactionbar",children:(0,r.jsx)(e.code,{children:"LoadActionBar"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["barNumber ",(0,r.jsx)(e.code,{children:"number"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Loads the primary action bar"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{alt:"Action bar switcher",src:t(5816).c+"",width:"467",height:"161"})}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"getskillonbar",children:(0,r.jsx)(e.code,{children:"getSkillOnBar"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["skillName ",(0,r.jsx)(e.code,{children:"string"}),"\nGet's a skill on the ability bar"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Checks if it can be used"}),"\n",(0,r.jsx)(e.p,{children:"Returns nil if the skill isn't found or can't be used"}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"countticks",children:(0,r.jsx)(e.code,{children:"countTicks"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["ticks ",(0,r.jsx)(e.code,{children:"number"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Sleeps for the given number of game ticks"}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"rangesleep",children:(0,r.jsx)(e.code,{children:"rangeSleep"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["milliseconds ",(0,r.jsx)(e.code,{children:"number"})]}),"\n",(0,r.jsxs)(e.li,{children:["randMin ",(0,r.jsx)(e.code,{children:"number"})," = 0"]}),"\n",(0,r.jsxs)(e.li,{children:["randMax ",(0,r.jsx)(e.code,{children:"number"})," = 0"]}),"\n"]}),"\n"]}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Sleeps for random number of milliseconds"}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"sleepuntil",children:(0,r.jsx)(e.code,{children:"SleepUntil"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["conditionFunc ",(0,r.jsx)(e.code,{children:"function"})]}),"\n",(0,r.jsxs)(e.li,{children:["timeout ",(0,r.jsx)(e.code,{children:"number"})," (seconds)"]}),"\n",(0,r.jsxs)(e.li,{children:["message ",(0,r.jsx)(e.code,{children:"string"})]}),"\n",(0,r.jsxs)(e.li,{children:["... any ",(0,r.jsx)(e.code,{children:"arguments to the function"})]}),"\n",(0,r.jsxs)(e.li,{children:["@return ",(0,r.jsx)(e.code,{children:"boolean"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Sleeps until the passed condition returns true or the timeout duration is reached"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Checks for random events, game state and API.Read_LoopyLoop while sleeping"})}),"\n"]}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",metastring:'title="Example" showLineNumbers',children:'\nfunction UTILS.isChooseOptionInterfaceOpen()\n    return API.Compare2874Status(12, false)\nend\n--highlight-start\nlocal function waitForChooseOption()\n    return UTILS.SleepUntil(UTILS.isChooseOptionInterfaceOpen, 20, "Waiting for choose option to open")\nend\n--highlight-end\nlocal wasItOpen = waitForChooseOption()\n'})}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"sleeputilwithoutchecks",children:(0,r.jsx)(e.code,{children:"SleepUtilWithoutChecks"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["conditionFunc ",(0,r.jsx)(e.code,{children:"function"})]}),"\n",(0,r.jsxs)(e.li,{children:["timeout ",(0,r.jsx)(e.code,{children:"number"})," (seconds)"]}),"\n",(0,r.jsxs)(e.li,{children:["message ",(0,r.jsx)(e.code,{children:"string"})]}),"\n",(0,r.jsxs)(e.li,{children:["... any ",(0,r.jsx)(e.code,{children:"arguments to the function"})]}),"\n",(0,r.jsxs)(e.li,{children:["@return ",(0,r.jsx)(e.code,{children:"boolean"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Sleeps until the passed condition returns true or the timeout duration is reached"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"There are no checks in place"})}),"\n"]}),(0,r.jsx)(e.hr,{}),(0,r.jsx)(e.h3,{id:"getamountinorebox",children:(0,r.jsx)(e.code,{children:"getAmountInOrebox"})}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Parameters"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["oreId ",(0,r.jsx)(e.code,{children:"number"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"Returns the number of ores of requested id present in ore box."}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:(0,r.jsx)(e.code,{children:"UTILS.ORES.NECRITE"})})," can be used in place of the ID for Necrite (44826)"]}),"\n"]}),(0,r.jsx)(e.hr,{})]}),"\n",(0,r.jsx)(e.admonition,{type:"hidden",children:(0,r.jsx)(e.h2,{id:"code",children:"Code"})}),"\n",(0,r.jsx)(a.c,{title:"Code",children:(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-lua",metastring:"showLineNumbers",children:'--[[\n#Script Name:   <utils.lua>\n# Description:  <Collection of utility functions>\n# Autor:        <Dead (dea.d - Discord)>\n# Version:      <3.0>\n# Datum:        <2024.04.03>\n--]]\n\nlocal API = require("api")\nlocal UTILS = {}\n\nUTILS.__index = UTILS\n\nfunction UTILS.new()\n  local self = setmetatable({}, UTILS)\n  self.afk = os.time()\n  self.randomTime = math.random(180, 280)\n  self.worldTime = os.time()\n  self.stateFailCount = 0\n  return self\nend\n\n--#region Variables\nlocal MAX_IDLE_TIME_MINUTES = 5\n\nUTILS.ORES = {\n  COPPER = 436,\n  TIN = 438,\n  IRON = 440,\n  SILVER = 442,\n  GOLD = 444,\n  MITHRIL = 447,\n  ADAMANTITE = 449,\n  RUNITE = 451,\n  COAL = 453,\n  BANITE = 21778,\n  LUMINITE = 44820,\n  ORICHALCITE = 44822,\n  DRAKOLITH = 44824,\n  NECRITE = 44826,\n  PHASMATITE = 44828,\n  LIGHT_ANIMICA = 44830,\n  DARK_ANIMICA = 44832\n}\n\nUTILS.RUNES = {\n  AIR = { ID = 556, INV_VB = 5886 },\n  MIND = { ID = 558, INV_VB = 5902 },\n  WATER = { ID = 555, INV_VB = 5887 },\n  EARTH = { ID = 557, INV_VB = 5889 },\n  FIRE = { ID = 554, INV_VB = 5888 },\n  BODY = { ID = 559, INV_VB = 5896 },\n  COSMIC = { ID = 564, INV_VB = 5897 },\n  NATURE = { ID = 561, INV_VB = 5899 },\n  CHAOS = { ID = 562, INV_VB = 5898 },\n  LAW = { ID = 563, INV_VB = 5900 },\n  DEATH = { ID = 560, INV_VB = 5901 },\n  ASTRAL = { ID = 9075, INV_VB = 5903 },\n  BLOOD = { ID = 565, INV_VB = 5904 },\n  SOUL = { ID = 566, INV_VB = 5905 },\n}\n\n---@param rune UTILS.RUNES\n---@return number\nfunction UTILS.getRuneCountInventory(rune)\n  return API.VB_FindPSettinOrder(rune.INV_VB, 1).state\nend\n\n--- The anti idle function we\'ve all been using\n---@return boolean\nfunction UTILS:antiIdle()\n  math.randomseed(os.time())\n  local timeDiff = os.difftime(os.time(), self.afk)\n  local randomTime = math.random((MAX_IDLE_TIME_MINUTES * 60) * 0.6, (MAX_IDLE_TIME_MINUTES * 60) * 0.9)\n  if timeDiff > randomTime then\n    API.PIdle2()\n    self.afk = os.time()\n    return true\n  end\n  return false\nend\n\n--- Function to tell if a string is empty\n---@param s string\n---@return boolean\nfunction UTILS.isEmpty(s)\n  return s == nil or s == \'\'\nend\n\n--- Function to check if a table inclues a value\n---@param table table\n---@param value any\n---@return boolean\nfunction UTILS.tableIncludes(table, value)\n  for i = 1, #table do\n    if table[i] == value then\n      return true\n    end\n  end\n  return false\nend\n\n--- Function to convert userdata to vector<string>\nfunction UTILS.UserDataToVector(userdata)\n  local vector = {}\n\n  -- Iterate over the userdata values and extract them\n  for i = 1, #userdata do\n    vector[i] = userdata[i]\n  end\n\n  return vector\nend\n\n--- Function to sleep for milliseconds with a random delay\n---@param milliseconds number\nfunction UTILS.randomSleep(milliseconds)\n  math.randomseed(os.time())\n  local randomDelay = math.random(1, 200)\n  local totalDelay = milliseconds + randomDelay\n  local start = os.clock()\n  local target = start + (totalDelay / 1000)\n  while os.clock() < target do\n    API.RandomSleep2(100, 0, 0)\n  end\nend\n\n--- Function to convert userdata to string\nfunction UTILS.UserDataToString(userdata)\n  local vector = {}\n\n  -- Iterate over the userdata values and extract them\n  for i = 1, #userdata do\n    vector[i] = userdata[i]\n  end\n\n  return table.concat(vector, "")\nend\n\n--- Function to convert a Lua table to string\n---comment\n---@param tbl table\n---@return string\nfunction UTILS.tableToString(tbl)\n  local strTable = {}\n  for _, innerTbl in ipairs(tbl) do\n    local strInnerTable = {}\n    for _, value in ipairs(innerTbl) do\n      table.insert(strInnerTable, tostring(value))\n    end\n    table.insert(strTable, "{" .. table.concat(strInnerTable, ", ") .. "}")\n  end\n  return table.concat(strTable, ", ")\nend\n\n--- Function to check for various game states<br>\n--- Checks if we\'re logged in and if API.Read_LoopyLoop() is true\n---@return boolean\nfunction UTILS:gameStateChecks()\n  if API.GetGameState2() ~= 3 and self.stateFailCount > 5 then\n    print(\'not logged in after 100 checks\')\n    API.Write_LoopyLoop(false)\n    return false\n  elseif API.GetGameState2() ~= 3 then\n    UTILS.SleepUntilWithoutChecks(function() return API.GetGameState2() == 3 end,5,\'state change to 3\',true)\n    print(\'not logged in \' .. tostring(self.stateFailCount))\n    self.stateFailCount = self.stateFailCount + 1\n  end\n  if not API.Read_LoopyLoop() then\n    print(\'LoopyLoop is false\')\n    return false\n  end\n  return true\nend\n\n--- Function to wait for an animation to complete, upto defined seconds\n---@param animationId number\n---@param maxWaitInSeconds number\n---@return boolean\nfunction UTILS.waitForAnimation(animationId, maxWaitInSeconds)\n  local animation = animationId or 0\n  local waitTime = maxWaitInSeconds or 5\n  local exitLoop = false\n  local start = os.time()\n  while not exitLoop and os.time() - start < waitTime do\n    if not (API.Read_LoopyLoop() or API.PlayerLoggedIn()) then\n      exitLoop = true\n      return false\n    end\n    if (API.ReadPlayerAnim() == animation) then\n      exitLoop = true\n      return true\n    end\n    UTILS.rangeSleep(50, 50, 50)\n  end\nend\n\n--- After exiting combat, you can use a lodestone for a specific duration.<br>\n--- This method tells you when you can use a lodestone\n---@return boolean\nfunction UTILS.CanUseLodestone()\n  local vb = API.VB_FindPSett(7994)\n  return vb.state == -1 or vb.stateAlt == -1\nend\n\n--- Function to wait for a player to reach a coords within a threshold, upto defined seconds\n---comment\n---@param coords WPOINT\n---@param threshold number\n---@param maxWaitInSeconds number\n---@return boolean\nfunction UTILS.waitForPlayerAtCoords(coords, threshold, maxWaitInSeconds)\n  local waitTime = maxWaitInSeconds or 5\n  local variance = threshold or 0\n  local exitLoop = false\n  local start = os.time()\n  while not exitLoop and os.time() - start < waitTime do\n    if not (API.Read_LoopyLoop() or API.PlayerLoggedIn()) then\n      exitLoop = true\n      return false\n    end\n    if (API.PInAreaW(coords, variance)) then\n      exitLoop = true\n      return true\n    end\n    UTILS.rangeSleep(50, 50, 50)\n  end\n  return false\nend\n\n--[[\n  Example Usage\n\n  local lodestone = {\n    BanditCamp = {\n        id = 9,\n        x = 2899,\n        y = 3544,\n        z = 0\n    }\n  }\n\n  print(\'Teleporting to \', UTILS.GetLabelFromArgument(lodestone.BanditCamp, lodestone))\n  would print \'Teleporting to BanditCamp\'\n--]]\n---\n--- Function to get the label of the table element\n---@param arg any\n---@param table table\n---@return any | nil\nfunction UTILS.GetLabelFromArgument(arg, table)\n  for label, record in pairs(table) do\n    if record == arg then\n      return label\n    end\n  end\n  return nil\nend\n\n--- Function to concatenate tables\n---@param ... table[]\n---@return table\nfunction UTILS.concatenateTables(...)\n  local result = {}\n  for _, tbl in ipairs({ ... }) do\n    for _, value in ipairs(tbl) do\n      table.insert(result, value)\n    end\n  end\n  return result\nend\n\n--- Function to extract distinct values from a table\n---@param inputTable table\n---@return table\nfunction UTILS.getDistinctValues(inputTable)\n  local distinctValues = {}\n  local seenValues = {}\n\n  for _, value in ipairs(inputTable) do\n    if not seenValues[value] then\n      table.insert(distinctValues, value)\n      seenValues[value] = true\n    end\n  end\n  return distinctValues\nend\n\n--- Function to get you distinct values from the input table based on the property\n---comment\n---@param inputTable table\n---@param property string\n---@return table\nfunction UTILS.getDistinctByProperty(inputTable, property)\n  local distinctValues = {}\n  local seenValues = {}\n\n  for _, value in ipairs(inputTable) do\n    local prop = value[property]\n    if not seenValues[prop] then\n      table.insert(distinctValues, value)\n      seenValues[prop] = true\n    end\n  end\n  return distinctValues\nend\n\n--[[\nHandles the below random events\n<br>18204 Chronicle fragment, other peopls 18205\n<br>19884 Guthix butterfly       \t\n<br>26022 Seren spirit\n<br>27228 Divine blessing\n<br>27297 Forge phoenix\n<br>28411 Catalyst\n<br>30599 Halloween Pumpkin\n<br>15451 Fire spirit\n]]\n---@return boolean\nfunction UTILS.DO_RandomEvents()\n  local F_obj = API.GetAllObjArrayInteract({ 19884, 26022, 27228, 27297, 28411, 30599, 15451 }, 20, 1)\n  --if not (F_obj) == nil then\n  if (F_Obj) ~= nil then\n    print("Random event object detected: trying to click")\n    UTILS.randomSleep(1000)\n    if API.DoAction_NPC__Direct(0x29, API.InteractNPC_route, F_obj[1]) then\n      UTILS.randomSleep(1000)\n      return true\n    end\n  end\n  return false\nend\n\n--- Function to load a primary action bar\n---@param barNumber number\n---@return boolean\nfunction UTILS.LoadActionBar(barNumber)\n  print("Loading action bar: " .. barNumber)\n  local bars = {\n    ONE = { number = 255, id = 1, offset = API.OFF_ACT_GeneralInterface_route },\n    TWO = { number = 255, id = 2, offset = API.OFF_ACT_GeneralInterface_route },\n    THREE = { number = 255, id = 3, offset = API.OFF_ACT_GeneralInterface_route },\n    FOUR = { number = 255, id = 4, offset = API.OFF_ACT_GeneralInterface_route },\n    FIVE = { number = 255, id = 5, offset = API.OFF_ACT_GeneralInterface_route },\n    SIX = { number = 255, id = 6, offset = API.OFF_ACT_GeneralInterface_route2 },\n    SEVEN = { number = 255, id = 7, offset = API.OFF_ACT_GeneralInterface_route2 },\n    EIGHT = { number = 255, id = 8, offset = API.OFF_ACT_GeneralInterface_route2 },\n    NINE = { number = 255, id = 9, offset = API.OFF_ACT_GeneralInterface_route2 },\n    TEN = { number = 255, id = 10, offset = API.OFF_ACT_GeneralInterface_route2 },\n    ELEVEN = { number = 254, id = 6, offset = API.OFF_ACT_GeneralInterface_route2 },\n    TWELVE = { number = 254, id = 7, offset = API.OFF_ACT_GeneralInterface_route2 },\n    THIRTEEN = { number = 254, id = 8, offset = API.OFF_ACT_GeneralInterface_route2 },\n    FOURTEEN = { number = 254, id = 9, offset = API.OFF_ACT_GeneralInterface_route2 },\n    FIFTEEN = { number = 254, id = 10, offset = API.OFF_ACT_GeneralInterface_route2 },\n    SIXTEEN = { number = 253, id = 6, offset = API.OFF_ACT_GeneralInterface_route2 },\n    SEVENTEEN = { number = 253, id = 7, offset = API.OFF_ACT_GeneralInterface_route2 },\n    EIGHTEEN = { number = 253, id = 8, offset = API.OFF_ACT_GeneralInterface_route2 },\n  }\n\n  local selected = { id = nil, number = nil, offset = nil }\n\n  -- Set [5th param in DO::DoAction_Interface]\n  if barNumber >= 1 and barNumber <= 10 then\n    selected.number = 255\n  elseif barNumber >= 11 and barNumber <= 15 then\n    selected.number = 254\n  elseif barNumber >= 16 and barNumber <= 18 then\n    selected.number = 253\n  else\n    print("Invalid bar number passed: " .. tostring(barNumber))\n    return false\n  end\n\n  -- Set Offset [7th param in DO::DoAction_Interface]\n  if barNumber >= 1 and barNumber <= 5 then\n    selected.offset = API.OFF_ACT_GeneralInterface_route\n  elseif barNumber >= 6 and barNumber <= 18 then\n    selected.offset = API.OFF_ACT_GeneralInterface_route2\n  end\n  -- set number [3rd param in DO::DoAction_Interface]\n  if barNumber == 10 or barNumber == 15 then\n    selected.id = 10\n  elseif barNumber >= 1 and barNumber <= 9 then\n    selected.id = barNumber\n  elseif barNumber >= 11 and barNumber <= 14 then\n    selected.id = barNumber - 5\n  elseif barNumber >= 16 and barNumber <= 18 then\n    selected.id = barNumber - 10\n  end\n\n  -- print("selected is: {id: " .. selected.id .. ", number: " .. selected.number .. ", offset: " .. selected.offset)\n  API.DoAction_Interface(0xffffffff, 0xffffffff, selected.id, 1430, selected.number, -1, selected.offset)\nend\n\n--- Waits for a number of ticks\n---@param ticks number\n---@return number -- number of ticks elapsed\nfunction UTILS.countTicks(ticks)\n  local currentTick = API.Get_tick()\n  local ticker = currentTick + ticks\n  while ticker >= currentTick do\n    currentTick = API.Get_tick()\n    UTILS.rangeSleep(10, 0, 0)\n    if not UTILS.gameStateChecks() then\n      return 0\n    end\n  end\n  return ticks\nend\n\n-- Function to sleep for milliseconds with a random delay\n---@param milliseconds number\n---@param randMin number = 0\n---@param randMax number = 0\nfunction UTILS.rangeSleep(milliseconds, randMin, randMax)\n  randMin = randMin or 0\n  randMax = randMax or 0\n  math.randomseed(os.time())\n  local randomDelay = math.random(randMin, randMax)\n  local totalDelay = milliseconds + randomDelay\n  local start = os.clock()\n  local target = start + (totalDelay / 1000)\n  while os.clock() < target do\n    API.RandomSleep2(50, 0, 0)\n  end\nend\n\n--- Sleeps until the condition function returns true<br>\n--- Checks for other random events,game state and API.Read_LoopyLoop\n---@param conditionFunc function -- condition to evaluate\n---@param timeout number -- max duration to wait\n---@param message string -- message to print if condition is satisfied\n---@param ... any -- arguments to condition function\n---@return boolean\nfunction UTILS.SleepUntil(conditionFunc, timeout, message, ...)\n  local startTime = os.time()\n  local sleepSuccessful = false\n  while not conditionFunc(...) do\n    API.DoRandomEvents()\n    if os.difftime(os.time(), startTime) >= timeout then\n      print("Stopped waiting for " .. message .. " after " .. timeout .. " seconds.")\n      break\n    end\n    if not API.Read_LoopyLoop() then\n      print("Script exited - breaking sleep.")\n      break\n    end\n    if not UTILS:gameStateChecks() then\n      print("State checks failed - breaking sleep.")\n      break\n    end\n    API.RandomSleep2(50, 0, 0)\n  end\n  if conditionFunc(...) then\n    print("Sleep condition met for " .. message)\n    sleepSuccessful = true\n  end\n  return sleepSuccessful\nend\n\n--- Sleeps until the condition function returns true<br>\n--- No checks\n---@param conditionFunc function -- condition to evaluate\n---@param timeout number -- max duration to wait\n---@param message string -- message to print if condition is satisfied\n---@param loopy boolean -- should check if script is still running\n---@param ... any -- arguments to condition function\n---@return boolean\nfunction UTILS.SleepUntilWithoutChecks(conditionFunc, timeout, message, loopy, ...)\n  local startTime = os.time()\n  local sleepSuccessful = false\n  local checkLoopy = loopy or false\n  while not conditionFunc(...) do\n    API.DoRandomEvents()\n    if os.difftime(os.time(), startTime) >= timeout then\n      print("Stopped waiting for " .. message .. " after " .. timeout .. " seconds.")\n      break\n    end\n    if checkLoopy and not API.Read_LoopyLoop() then\n      print("Script exited - breaking sleep.")\n      break\n    end\n    API.RandomSleep2(50, 0, 0)\n  end\n  if conditionFunc(...) then\n    print("Sleep condition met for " .. message)\n    sleepSuccessful = true\n  end\n  return sleepSuccessful\nend\n\n--- Is the world selection window open\n---@return boolean\nfunction UTILS.isWorldSelectionOpen()\n  return API.VB_FindPSett(2874, 1, 0).state == 61\nend\n\n--- Is the Crafting interface open\n---@return boolean\nfunction UTILS.isCraftingInterfaceOpen()\n  return API.VB_FindPSett(2874, 1, 0).state == 1310738\nend\n\n--- Is the Choose Option interface open\n---@return boolean\nfunction UTILS.isChooseOptionInterfaceOpen()\n  return API.VB_FindPSett(2874, 1, 0).state == 12\nend\n\n--- Is the Cooking interface open\n---@return boolean\nfunction UTILS.isCookingInterfaceOpen()\n  return API.VB_FindPSett(2874, 1, 0).state == 18\nend\n\n--- Is the Smelting interface open\n---@return boolean\nfunction UTILS.isSmeltingInterfaceOpen()\n  return API.VB_FindPSett(2874, 1, 0).state == 85\nend\n\n--- Is the Jewelry Teleport interface open\n---@return boolean\nfunction UTILS.isTeleportSeedInterfaceOpen()\n  return API.VB_FindPSett(2874, 1, 0).state == 13\nend\n\n--- Is there an active aura\n---@return boolean\nfunction UTILS.isAuraActive()\n  return API.VB_FindPSett(7702).state > 0\nend\n\n--#region Abilities\nlocal function findBarWithQueuedSkill()\n  local queuedBar = API.VB_FindPSettinOrder(5861, 0).state\n  if queuedBar == 0 then return nil end\n  if queuedBar == 1003 then return 0 end\n  if queuedBar == 1032 then return 1 end\n  if queuedBar == 1033 then return 2 end\n  if queuedBar == 1034 then return 3 end\n  if queuedBar == 1035 then return 4 end\n  return nil\nend\n\nlocal function isAbilityQueued()\n  return API.VB_FindPSettinOrder(5861, 0).state ~= 0\nend\n\nlocal function getSlotOfQueuedSkill()\n  return API.VB_FindPSettinOrder(4164, 0).state\nend\n\n--- Is a skill queued.\n---@param skill string -- skillName\n---@return boolean\nfunction UTILS.isSkillQueued(skill)\n  if not isAbilityQueued() then return false end\n  local barNumber = findBarWithQueuedSkill()\n  if barNumber == nil then return false end\n  local skillbar = API.GetAB_name(barNumber, skill)\n  local slot = getSlotOfQueuedSkill()\n  if slot == 0 then return false end\n  if skillbar.slot == slot then return true end\n  return false\nend\n\n--- Can a skill be queued.\n---@param skill string -- skillName\n---@return boolean\nfunction UTILS.canQueueSkill(skill)\n  if UTILS.isSkillQueued(skill) then return false end\n  if UTILS.canUseSkill(skill) then\n    local skillFound = API.GetABs_name1(skill)\n    if skillFound.cooldown_timer < 6 then return true end\n  end\n  return false\nend\n--- Can a skill be used.\n---@param skill string -- skillName\n---@return boolean\nfunction UTILS.canUseSkill(skill)\n  local skillFound = API.GetABs_name1(skill)\n  if skillFound.id == 0 then return false end\n  if not skillFound.enabled then return false end\n  return true\nend\n\n--- Get\'s a skill on the ability bar<br>\n--- Checks if it can be used<br>\n--- Returns nil if the skill isn\'t found or can\'t be used\n---@param skillName string\n---@return Abilitybar | nil\nfunction UTILS.getSkillOnBar(skillName)\n  local skillOnAB = API.GetABs_name1(skillName)\n  if UTILS.canUseSkill(skillName) then\n    return skillOnAB\n  else\n    return nil\n  end\nend\n\n--- Cast Surge.\n---@return boolean\nfunction UTILS.surge()\n  local surgeAB = UTILS.getSkillOnBar("Surge")\n  if surgeAB ~= nil then\n    return API.DoAction_Ability_Direct(surgeAB, 1, API.OFF_ACT_GeneralInterface_route)\n  end\n  return false\nend\n\n--- Casts `Dive`.\n---@param destinationTile WPOINT -- the tile to `Dive` to\n---@return boolean\nfunction UTILS.dive(destinationTile)\n  local diveAB = UTILS.getSkillOnBar("Dive")\n  if diveAB ~= nil then\n    return API.DoAction_Dive_Tile(destinationTile)\n  end\n  return false\nend\n\n--#endregion\n\n--- Finds an item in the inventory\n---@param itemId number\n---@return IInfo|nil\nfunction UTILS.findItemInInventory(itemId)\n  local inventory = API.ReadInvArrays33()\n  local foundItem = nil\n  for i = 1, #inventory do\n    if inventory[i].itemid1 == itemId then\n      foundItem = inventory[i]\n      break\n    end\n  end\n  return foundItem\nend\n\n--- Is the Choose Option interface open\n---@return boolean\nfunction UTILS.isPrayersTabOpen()\n  return API.VB_FindPSettinOrder(3172, 1).state == 1\nend\n\n--- Is the player on Normal Prayers\n---@return boolean\nfunction UTILS.isUsingNormalPrayers()\n  return API.VB_FindPSettinOrder(3277, 0).state & 1 == 0\nend\n\n--- Is the player on Curses\n---@return boolean\nfunction UTILS.isUsingCurses()\n  return API.VB_FindPSettinOrder(3277, 0).state & 1 == 1\nend\n\n--- Is the player on Regular Magic spellbook\n---@return boolean\nfunction UTILS.isUsingNormalMagic()\n  return API.VB_FindPSettinOrder(4, 0).state == 1280\nend\n\n--- Is the player on Ancient Magic spellbook\n---@return boolean\nfunction UTILS.isUsingAncientMagic()\n  return API.VB_FindPSettinOrder(4, 0).state == 1281\nend\n\n--- Is the player on Lunar Magic spellbook\n---@return boolean\nfunction UTILS.isUsingLunarMagic()\n  return API.VB_FindPSettinOrder(4, 0).state == 1282\nend\n\n--- Is Soul Split prayer on\n---@return boolean\nfunction UTILS.isSoulSplitting()\n  return API.VB_FindPSettinOrder(3269, 0).state == 25\nend\n\n--- Is Deflect Melee prayer on\n---@return boolean\nfunction UTILS.isDeflectMelee()\n  return API.VB_FindPSettinOrder(3275, 0).state == 512\nend\n\n--- Is Deflect Magic prayer on\n---@return boolean\nfunction UTILS.isDeflectMagic()\n  return API.VB_FindPSettinOrder(3275, 0).state == 128\nend\n\n--- Is Deflect Range prayer on\n---@return boolean\nfunction UTILS.isDeflectRange()\n  return API.VB_FindPSettinOrder(3275, 0).state == 256\nend\n\n--- Is Deflect Necromancy prayer on\n---@return boolean\nfunction UTILS.isDeflectNecro()\n  return API.VB_FindPSettinOrder(5859, 0).state >> 16 & 0xffff == 2\nend\n\n--- Toggles visibility of the Prayer Window\n---@return boolean\nfunction UTILS.togglePrayerWindow()\n  return API.DoAction_Interface(0xc2, 0xffffffff, 1, 1432, 5, 5, API.OFF_ACT_GeneralInterface_route)\nend\n\n--- Gets the duration left on the familiar\n---@return number -- duration left\nfunction UTILS.getFamiliarDuration()\n  local value = API.VB_FindPSettinOrder(1786, 0).state\n  if value == 0 then return 0 end\n  return (math.floor(value / 2.1333333)) / 60\nend\n\n--- Is Chronicle Attraction prayer on\n---@return boolean\nfunction UTILS.isChronicleAttractionActive()\n  return API.VB_FindPSettinOrder(6890, 0).state >> 16 & 0xffff == 4\nend\n\n--- Is Chronicle Attraction prayer available\n---@return boolean\nfunction UTILS.hasChronicleAttraction()\n  if not UTILS.isUsingCurses() then\n    print(\'not on curses\')\n    return false\n  end\n  local open = UTILS.isPrayersTabOpen()\n  if not open then\n    UTILS.togglePrayerWindow()\n    UTILS.randomSleep(50)\n  end\n  local chronicleInterface = { { 1458, 4, -1, -1, 0 }, { 1458, 6, -1, 4, 0 }, { 1458, 8, -1, 6, 0 }, { 1458, 40, -1, 8, 0 }, { 1458, 40, 30, 40, 0 } }\n\n  local inter = API.ScanForInterfaceTest2Get(false, chronicleInterface)\n  local hasPrayer = false\n  if (#inter > 0) then\n    hasPrayer = inter[1].xs > 0\n  end\n  if not open then\n    UTILS.togglePrayerWindow()\n  end\n  return hasPrayer\nend\n\n--- Checks if the player is within a specified area.<br>\n-- This function can handle both rectangular and polygonal areas.<br>\n-- For a rectangle, the area is defined by two opposite corners as four numbers `{x1, y1, x2, y2}`.<br>\n-- For a polygon, the area is defined as a table of `WPOINT`.<br>\n---@param area table The area definition. Can be either `{x1, y1, x2, y2}` for a rectangle, or an array of `WPOINT` for a polygon.<br>\n---@return boolean -- True if the player is within the specified area, False otherwise.\n---@usage\n--\n--      -- Example for a rectangle:\n--        local rectangleArea = {3020, 3234, 3022, 3239}\n--        local inRectangle = UTILS.playerInArea(rectangleArea)\n--        print("Player is in rectangle area: ", inRectangle)\n--\n--      -- Example for a polygon:\n--        local point = WPOINT.new(3021,3233,0)\n--        local polygonArea = {\n--          WPOINT.new(3020,3234,0),\n--          WPOINT.new(3022,3234,0),\n--          WPOINT.new(3022,3239,0),\n--          WPOINT.new(3020,3239,0),\n--        }\n--     local inPolygon = UTILS.playerInArea(polygonArea)\n--     print("Player is in polygon area: ", inPolygon)\nfunction UTILS.playerInArea(area)\n  return UTILS.isCoordInArea(API.PlayerCoord(), area)\nend\n\n--- Checks if the coordinate is within a specified area.<br>\n-- This function can handle both rectangular and polygonal areas.<br>\n-- For a rectangle, the area is defined by two opposite corners as four numbers `{x1, y1, x2, y2}`.<br>\n-- For a polygon, the area is defined as a table of `WPOINT`.<br>\n---@param area table The area definition. Can be either `{x1, y1, x2, y2}` for a rectangle, or an array of `WPOINT` for a polygon.<br>\n---@return boolean -- True if the player is within the specified area, False otherwise.\n---@usage\n--\n--      -- Example for a rectangle:\n--        local point = WPOINT.new(3021,3233,0)\n--        local rectangleArea = {3020, 3234, 3022, 3239}\n--        local inRectangle = UTILS.isCoordInArea(point, rectangleArea)\n--        print("Point is in rectangle area: ", inRectangle)\n--\n--      -- Example for a polygon:\n--        local point = WPOINT.new(3021,3233,0)\n--        local polygonArea = {\n--          WPOINT.new(3020,3234,0),\n--          WPOINT.new(3022,3234,0),\n--          WPOINT.new(3022,3239,0),\n--          WPOINT.new(3020,3239,0),\n--        }\n--        local inPolygon = UTILS.isCoordInArea(point,polygonArea)\n--        print("Point is in polygon area: ", inPolygon)\nfunction UTILS.isCoordInArea(coord, area)\n  if coord.z ~= API.PlayerCoord().z then\n    return false\n  end\n\n  -- Normalize area format\n  if #area == 4 and type(area[1]) == "number" then\n    -- Rectangle format: {x1, y1, x2, y2}\n    local x1, y1, x2, y2 = area[1], area[2], area[3], area[4]\n    area = {\n      { x = x1, y = y1 },\n      { x = x2, y = y1 },\n      { x = x2, y = y2 },\n      { x = x1, y = y2 }\n    }\n  elseif type(area[1]) == "table" and #area[1] == 2 then\n    -- Array of WPOINT format: {WPOINT,WPOINT, ...}\n    for i, point in ipairs(area) do\n      area[i] = { x = point.x, y = point.y }\n    end\n  end\n\n  local count = 0\n  local n = #area\n  for i = 1, n do\n    local j = (i % n) + 1\n    local vertex1 = area[i]\n    local vertex2 = area[j]\n    if ((vertex1.y > coord.y) ~= (vertex2.y > coord.y)) and\n        (coord.x < (vertex2.x - vertex1.x) * (coord.y - vertex1.y) / (vertex2.y - vertex1.y) + vertex1.x) then\n      count = count + 1\n    end\n  end\n\n  -- Point is inside the polygon if count is odd\n  return (count % 2) == 1\nend\n\n---Get number of ores in ore box\n---@param oreId integer\n---@return integer\n--[[\n    Ore IDs:\n\n    436     Copper\n    438     Tin\n    440     Iron\n    442     Silver\n    444     Gold\n    447     Mithril\n    449     Adamantite\n    451     Runite\n    453     Coal\n    21778   Banite\n    44820   Luminite\n    44822   Orichalcite\n    44824   Drakolith\n    44826   Necrite\n    44828   Phasmatite\n    44830   Light animica\n    44832   Dark animica\n]]\nfunction UTILS.getAmountInOrebox(oreId)\n  local state\n  if oreId == 436 then       -- Copper ore\n    state = API.VB_FindPSett(8309).state\n  elseif oreId == 438 then   -- Tin ore\n    state = API.VB_FindPSett(8310).state\n  elseif oreId == 440 then   -- Iron ore\n    state = API.VB_FindPSett(8311).state\n  elseif oreId == 442 then   -- Silver ore\n    state = API.VB_FindPSett(8313).state\n  elseif oreId == 444 then   -- Gold ore\n    state = API.VB_FindPSett(8317).state\n  elseif oreId == 447 then   -- Mithril ore\n    state = API.VB_FindPSett(8314).state\n  elseif oreId == 449 then   -- Adamantite ore\n    state = API.VB_FindPSett(8315).state\n  elseif oreId == 451 then   -- Runite ore\n    state = API.VB_FindPSett(8318).state\n  elseif oreId == 453 then   -- Coal\n    state = API.VB_FindPSett(8312).state\n  elseif oreId == 21778 then -- Banite ore\n    state = API.VB_FindPSett(8323).state\n  elseif oreId == 44820 then -- Luminite\n    state = API.VB_FindPSett(8316).state\n  elseif oreId == 44822 then -- Orichalcite ore\n    state = API.VB_FindPSett(8319).state\n  elseif oreId == 44824 then -- Drakolith\n    state = API.VB_FindPSett(8320).state\n  elseif oreId == 44826 then -- Necrite ore\n    state = API.VB_FindPSett(8321).state\n  elseif oreId == 44828 then -- Phasmatite\n    state = API.VB_FindPSett(8322).state\n  elseif oreId == 44830 then -- Light animica\n    state = API.VB_FindPSett(8324).state\n  elseif oreId == 44832 then -- Dark animica\n    state = API.VB_FindPSett(8325).state\n  else\n    return -1\n  end\n  return state >> 0 & 0x3fff\nend\n\n--- Notes item in inventory<br>\n--- Supports both types of note paper\n---@param item number\n---@return boolean -- Was able to note\nfunction UTILS.NoteItem(item)\n  local inventory = API.ReadInvArrays33()\n  local notepaper = {}\n  local itemToNote = {}\n  local foundNotepaper = false\n  local foundItem = false\n\n  for i = 1, #inventory do\n    if inventory[i].itemid1 == 43045 or inventory[i].itemid1 == 30372 then\n      notepaper = inventory[i]\n      foundNotepaper = true\n    end\n    if inventory[i].itemid1 == item then\n      itemToNote = inventory[i]\n      foundItem = true\n    end\n  end\n\n  if not foundNotepaper then\n    API.logError("Couldn\'t find notepaper")\n    print("Couldn\'t find notepaper")\n    return false\n  end\n\n  if not foundItem then\n    API.logError("Couldn\'t find item with id:" .. tostring(item))\n    print("Couldn\'t find item with id:", item)\n    return false\n  end\n\n  API.DoAction_Interface(0x24, notepaper.itemid1, 0, notepaper.id1, notepaper.id2, notepaper.id3,\n    API.OFF_ACT_Bladed_interface_route)\n  API.RandomSleep2(50, 100, 200)\n  API.DoAction_Interface(0x24, itemToNote.itemid1, 0, itemToNote.id1, itemToNote.id2, itemToNote.id3,\n    API.OFF_ACT_GeneralInterface_route1)\n  return true\nend\n\nlocal instance = UTILS.new()\nreturn instance\n\n'})})})]})}function p(n={}){const{wrapper:e}={...(0,i.M)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(I,{...n})}):I(n)}},5816:(n,e,t)=>{t.d(e,{c:()=>r});const r=t.p+"assets/images/actionBarSwitcher-caed317dee60b6b165dc429799a49fb0.gif"}}]);