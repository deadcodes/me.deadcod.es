"use strict";(self.webpackChunkdeadcodes=self.webpackChunkdeadcodes||[]).push([[187],{759:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>I,contentTitle:()=>c,default:()=>E,frontMatter:()=>d,metadata:()=>L,toc:()=>u});var i=t(5893),o=t(1151),a=(t(7294),t(6234)),r=t(3504),l=t(2765);t(5687);const s=JSON.parse('[{"date":"2024-01-31","title":"Major Rewrite [3.0]","items":["Hotspots no longer have to be entered in the script. You can select them from the dropdown listed","Hotspots are filtered based on your current level","Added functionality to destroy artifacts","Added functionality to bank artifacts. [Please refer to the Configuration section on how to set this up]","After an artifact is found, we instantly start digging again","Auto Screener support added - If it is present in inventory, doesn\'t try to drop soil or fill ore box","Type of soil need not be set anymore, it is automatically infered from the hotspot selected","Entities with similar names no longer cause an issue"]},{"date":"2023-09-21","title":"Added Functionality [2.0]","items":["Overhauled script","Added UI (Thanks HigginsHax)","Added checking soilbox content through Varbits","Added Soil dropping","Added simple cart depositing"]},{"date":"2023-08-31","title":"Release [1.0]","items":["Release"]}]'),d={title:"DeadDigger",description:"Archaeology",slug:"/dead-digger"},c=void 0,L={id:"Scripts/deaddigger/index",title:"DeadDigger",description:"Archaeology",source:"@site/docs/Scripts/deaddigger/index.md",sourceDirName:"Scripts/deaddigger",slug:"/dead-digger",permalink:"/dead-digger",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"DeadDigger",description:"Archaeology",slug:"/dead-digger"},sidebar:"kbSidebar",previous:{title:"DeadButterfly",permalink:"/dead-butterfly"},next:{title:"DeadSlayer",permalink:"/dead-slayer"}},I={},u=[{value:"Changelog",id:"changelog",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Depositing",id:"depositing",level:3},{value:"Banking",id:"banking",level:3},{value:"Code",id:"code",level:2},{value:"Credits",id:"credits",level:2},{value:"HigginsHax",id:"higginshax",level:4},{value:"Grunstadt",id:"grunstadt",level:4}];function g(n){const e={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.Z,{title:"Dead Digger",version:"2024.01",skill:"Archaeology"}),"\n",(0,i.jsx)(e.admonition,{type:"hidden",children:(0,i.jsx)(e.h2,{id:"changelog",children:"Changelog"})}),"\n",(0,i.jsx)(l.Z,{changes:s}),"\n",(0,i.jsx)(e.admonition,{type:"hidden",children:(0,i.jsx)(e.h2,{id:"requirements",children:"Requirements"})}),"\n",(0,i.jsx)(r.Z,{title:"Requirements",children:(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"AutoScreener / Soilbox has to be present in inventory"}),"\n",(0,i.jsx)(e.li,{children:"Soildbox has to be on the action bar slot with a keybind configured"}),"\n",(0,i.jsx)(e.li,{children:"The soil for the location you're at should be on the action bar slot with a keybind configured"}),"\n",(0,i.jsxs)(e.li,{children:["Steps mentioned in the Configuration section have to be followed for proper functionality of the following","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Depositing materials"}),"\n",(0,i.jsx)(e.li,{children:"Banking artifacts"}),"\n"]}),"\n"]}),"\n"]})}),"\n",(0,i.jsx)(e.admonition,{type:"hidden",children:(0,i.jsx)(e.h2,{id:"configuration",children:"Configuration"})}),"\n",(0,i.jsxs)(r.Z,{title:"Configuration",children:[(0,i.jsx)(e.p,{children:"The following three methods have to be configured by you based on the digsite."}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.h3,{id:"depositing",children:"Depositing"}),"\n"]}),"\n"]}),(0,i.jsx)(e.p,{children:"The following function has to be configured based on the excavation site you're at."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"-- This function handles depositing\nlocal function depositCart()\n    API.logDebug('Inventory is full after using soilbox, trying to deposit: ' .. depositAttempt)\n    depositAttempt = depositAttempt + 1;\n    local cart = API.GetAllObjArrayInteract_str({ cartName }, 60, 0)\n    if #cart > 0 then\n        API.DoAction_Object_string1(0x29, API.OFF_ACT_GeneralObject_route0, { cartName },\n            60, true);\n        UTILS.randomSleep(800)\n        API.WaitUntilMovingEnds()\n        if not API.InvFull_() then\n            depositAttempt = 0\n        end\n    else\n        API.logWarn('Didn\\'t find: \"' .. cartName .. '\" within 60 tiles')\n    end\nend\n"})}),(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.h3,{id:"banking",children:"Banking"}),"\n"]}),"\n"]}),(0,i.jsxs)(e.p,{children:["This function handles banking when ",(0,i.jsx)(e.code,{children:"Bank Artifacts"})," is selected."]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"\nlocal function bank()\n    API.logDebug('Going to bank')\nend\n"})}),(0,i.jsx)(e.p,{children:"Once you're done banking, you'd have to traverse back to the digsite, which is handled by the below function."}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",children:"\nlocal function goBack()\n    API.logDebug('Going back to digsite')\nend\n"})})]}),"\n",(0,i.jsx)(e.admonition,{type:"hidden",children:(0,i.jsx)(e.h2,{id:"code",children:"Code"})}),"\n",(0,i.jsx)(r.Z,{title:"Code",children:(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-lua",metastring:"showLineNumbers",children:'local API = require("api")\nlocal UTILS = require("utils")\n\nAPI.SetDrawLogs(true)\nAPI.SetDrawTrackedSkills(true)\n\n--#region User Inputs\n-- highlight-next-line\nlocal cartName = "Material storage container"               -- name of the object to deposit materials\n\n--highlight-start\n--https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes\nlocal soilboxKeybind = 0x6D                                 -- keybind of the soilbox on actionbar\nlocal soilKeybind = 0x6B                                    -- keybind of the soil on actionbar\nlocal soilboxCapacity = 100                                 -- capacity of the soilbox. Increase can be purchased\n--highlight-end\n--#endregion\n\n--#region Imgui Setup\nlocal imguiBackground = API.CreateIG_answer()\nimguiBackground.box_name = "imguiBackground"\nimguiBackground.box_start = FFPOINT.new(16, 20, 0)\nimguiBackground.box_size = FFPOINT.new(400, 116, 0)\n\nlocal getTargetBtn = API.CreateIG_answer()\ngetTargetBtn.box_name = "Get"\ngetTargetBtn.box_start = FFPOINT.new(16, 20, 0)\ngetTargetBtn.box_size = FFPOINT.new(50, 30, 0)\ngetTargetBtn.tooltip_text = "Populate hotspots list"\n\nlocal setTargetBtn = API.CreateIG_answer()\nsetTargetBtn.box_name = "Set"\nsetTargetBtn.box_start = FFPOINT.new(60, 20, 0)\nsetTargetBtn.box_size = FFPOINT.new(50, 30, 0)\nsetTargetBtn.tooltip_text = "The script excavate this spot"\n\nlocal imguicombo = API.CreateIG_answer()\nimguicombo.box_name = "Hotspots     "\nimguicombo.box_start = FFPOINT.new(100, 20, 0)\nimguicombo.stringsArr = { "a", "b" }\nimguicombo.tooltip_text = "Available hotspots to target"\n\nlocal imguiCurrentTarget = API.CreateIG_answer()\nimguiCurrentTarget.box_name = "Current Target:"\nimguiCurrentTarget.box_start = FFPOINT.new(30, 50, 0)\n\nlocal imguiExcavate = API.CreateIG_answer()\nimguiExcavate.box_name = "Excavate"\nimguiExcavate.box_start = FFPOINT.new(18, 60, 0)\nimguiExcavate.box_size = FFPOINT.new(80, 30, 0)\nimguiExcavate.tooltip_text = "Start/Stop Excavating"\n\nlocal imguiTerminate = API.CreateIG_answer()\nimguiTerminate.box_name = "Stop Script"\nimguiTerminate.box_start = FFPOINT.new(100, 60, 0)\nimguiTerminate.box_size = FFPOINT.new(100, 30, 0)\nimguiTerminate.tooltip_text = "Exit the script"\n\nlocal imguiRuntime = API.CreateIG_answer()\nimguiRuntime.box_name = "imguiRuntime"\nimguiRuntime.box_start = FFPOINT.new(30, 90, 0)\n\nlocal imguiDestroy = API.CreateIG_answer()\nimguiDestroy.box_name = "Destroy Artifacts"\nimguiDestroy.tooltip_text = "Destroying: false"\nimguiDestroy.box_start = FFPOINT.new(200, 60, 0)\n\nlocal imguiBank = API.CreateIG_answer()\nimguiBank.box_name = "Bank Artifacts"\nimguiBank.tooltip_text = "Banking: false"\nimguiBank.box_start = FFPOINT.new(200, 80, 0)\n\n--#endregion\n\n--#region Variables init\nlocal targetPlaceholder = "None. Click Set Hotspot"\nlocal MAX_IDLE_TIME_MINUTES = 5\nlocal startTime, afk = os.time(), os.time()\nlocal depositAttempt = 0\nlocal artifactsFound = 0\nlocal soilBoxFull = false\nlocal shouldBank = false\nlocal shouldDestroy = false\nlocal target = targetPlaceholder\nlocal runLoop = false\nlocal targetNotFoundCount = 0\nlocal targets = {}\nlocal selectedTarget\nlocal COLORS = {\n    BACKGROUND = ImColor.new(10, 13, 29),\n    TARGET_UNSET = ImColor.new(189, 185, 167),\n    TARGET_SET = ImColor.new(70, 143, 126),\n    EXCAVATE = ImColor.new(84, 166, 102),\n    PAUSED = ImColor.new(238, 59, 83),\n    RUNTIME = ImColor.new(198, 120, 102)\n}\n\nimguiBackground.colour = COLORS.BACKGROUND\nimguiCurrentTarget.colour = COLORS.TARGET_UNSET\nimguiRuntime.colour = COLORS.EXCAVATE\n--#endregion\n\n--#region Util functions\n\nlocal function idleCheck()\n    local timeDiff = os.difftime(os.time(), afk)\n    local randomTime = math.random((MAX_IDLE_TIME_MINUTES * 60) * 0.6, (MAX_IDLE_TIME_MINUTES * 60) * 0.9)\n\n    if timeDiff > randomTime then\n        API.PIdle2()\n        afk = os.time()\n    end\nend\n\nlocal function formatElapsedTime(start)\n    local currentTime = os.time()\n    local elapsedTime = currentTime - start\n    local hours = math.floor(elapsedTime / 3600)\n    local minutes = math.floor((elapsedTime % 3600) / 60)\n    local seconds = elapsedTime % 60\n    return string.format("Runtime: %02d:%02d:%02d", hours, minutes, seconds)\nend\n\nlocal function gameStateChecks()\n    local gameState = API.GetGameState()\n    if (gameState ~= 3) then\n        API.logError(\'Not ingame with state: \' .. tostring(gameState))\n        print(\'Not ingame with state: \' .. tostring(gameState))\n        API.Write_LoopyLoop(false)\n        return\n    end\n    if targetNotFoundCount > 30 then\n        imguiExcavate.box_name = "Excavate"\n        runLoop = false\n        API.Write_LoopyLoop(false)\n    end\nend\n\nlocal function terminate()\n    runLoop = false\n    API.Write_LoopyLoop(false)\nend\n\n--#endregion\n\n\nlocal DIGSITES = {\n    EVERLIGHT = {\n        SOIL = { ID = 49519, VB = 9371 },\n        PRODROMOI = {\n            LABEL = "Prodromoi remains",\n            ID = { 116661 },\n            LEVEL = 42\n        },\n        MONOCEROS = {\n            LABEL = "Monoceros remains",\n            ID = { 116663 },\n            LEVEL = 48\n        },\n        AMPHITHEATER = {\n            LABEL = "Amphitheatre debris",\n            ID = { 116665 },\n            LEVEL = 51\n        },\n        CERAMICS = {\n            LABEL = "Ceramics studio debris",\n            ID = { 116666, 116667 },\n            LEVEL = 56\n        },\n        STADIO = {\n            LABEL = "Stadio debris",\n            ID = { 116669 },\n            LEVEL = 61\n        },\n        DOMINION = {\n            LABEL = "Dominion Games podium",\n            ID = { 116671 },\n            LEVEL = 69\n        },\n        OIKOS_STUDIO = {\n            LABEL = "Oikos studio debris",\n            ID = { 116673 },\n            LEVEL = 72\n        },\n        OIKOS_HUT = {\n            LABEL = "Oikos fishing hut remnants",\n            ID = { 116675 },\n            LEVEL = 84\n        },\n        ACROPOLIS = {\n            LABEL = "Acropolis debris",\n            ID = { 116677 },\n            LEVEL = 92\n        },\n        ICYENE = {\n            LABEL = "Icyene weapon rack",\n            ID = { 116679 },\n            LEVEL = 100\n        },\n        STOCKPILED_ART = {\n            LABEL = "Stockpiled art",\n            ID = { 116683 },\n            LEVEL = 105\n        },\n        BIBLIOTHEKE = {\n            LABEL = "Bibliotheke debris",\n            ID = { 116680, 116681 },\n            LEVEL = 109\n        },\n        OPTIMATOI = {\n            LABEL = "Optimatoi remains",\n            ID = { 116685 },\n            LEVEL = 117\n        }\n    },\n    INFERNAL = {\n        SOIL = { ID = 49521, VB = 9372 },\n        LODGE_BAR = {\n            LABEL = "Lodge bar storage",\n            ID = { 116817 },\n            LEVEL = 20\n        },\n        LODGE_ART = {\n            LABEL = "Lodge art storage",\n            ID = { 116819 },\n            LEVEL = 24\n        },\n        CULTIST = {\n            LABEL = "Cultist footlocker",\n            ID = { 116821 },\n            LEVEL = 29\n        },\n        SACRIFICIAL = {\n            LABEL = "Sacrificial altar",\n            ID = { 116823 },\n            LEVEL = 36\n        },\n        DIS_DUNGEON = {\n            LABEL = "Dis dungeon debris",\n            ID = { 116825 },\n            LEVEL = 45\n        },\n        INFERNAL = {\n            LABEL = "Infernal art",\n            ID = { 116827 },\n            LEVEL = 65\n        },\n        SHAKROTH = {\n            LABEL = "Shakroth remains",\n            ID = { 116829 },\n            LEVEL = 68\n        },\n        ANIMAL_TROPHIES = {\n            LABEL = "Animal trophies",\n            ID = { 116831 },\n            LEVEL = 81\n        },\n        DIS_OVERSPILL = {\n            LABEL = "Dis overspill",\n            ID = { 116833 },\n            LEVEL = 89\n        },\n        BYZROTH = {\n            LABEL = "Byzroth remains",\n            ID = { 116835 },\n            LEVEL = 98\n        },\n        HELLFIRE_FORGE = {\n            LABEL = "Hellfire forge",\n            ID = { 116839 },\n            LEVEL = 104\n        },\n        CHTHONIAN = {\n            LABEL = "Chthonian trophies",\n            ID = { 116837 },\n            LEVEL = 110\n        },\n        TSUTSAROTH = {\n            LABEL = "Tsutsaroth remains",\n            ID = { 116841 },\n            LEVEL = 116\n        }\n    },\n    KHARID = {\n        SOIL = { ID = 49517, VB = 9370 },\n        VENATOR = {\n            LABEL = "Venator remains",\n            ID = { 117101 },\n            LEVEL = 5\n        },\n        LEGIONARY = {\n            LABEL = "Legionary remains",\n            ID = { 117103 },\n            LEVEL = 12\n        },\n        FORT = {\n            LABEL = "Fort debris",\n            ID = { 116921, 116922, 116923, 116924 },\n            LEVEL = 12\n        },\n        CASTRA = {\n            LABEL = "Castra debris",\n            ID = { 117106 },\n            LEVEL = 12\n        },\n        ADMINISTRATUM = {\n            LABEL = "Administratum debris",\n            ID = { 117108 },\n            LEVEL = 25\n        },\n        PRAESIDIO = {\n            LABEL = "Praesidio remains",\n            ID = { 117110 },\n            LEVEL = 47\n        },\n        CARCERUM = {\n            LABEL = "Carcerem debris",\n            ID = { 117112 },\n            LEVEL = 58\n        },\n        CHAPEL = {\n            LABEL = "Kharid-et chapel debris",\n            ID = { 117114 },\n            LEVEL = 74\n        },\n        PONTIFEX = {\n            LABEL = "Pontifex remains",\n            ID = { 117116 },\n            LEVEL = 81\n        },\n        ORCUS_ALTAR = {\n            LABEL = "Orcus altar",\n            ID = { 117118 },\n            LEVEL = 86\n        },\n        ARMARIUM = {\n            LABEL = "Armarium debris",\n            ID = { 117120 },\n            LEVEL = 93\n        },\n        CULINARUM = {\n            LABEL = "Culinarum debris",\n            ID = { 117122, 119386 },\n            LEVEL = 100\n        },\n        ANCIENT = {\n            LABEL = "Ancient magick munitions",\n            ID = { 117124 },\n            LEVEL = 107\n        },\n        PRAETORIAN = {\n            LABEL = "Praetorian remains",\n            ID = { 117126 },\n            LEVEL = 114\n        },\n        WAR = {\n            LABEL = "War table debris",\n            ID = { 117128 },\n            LEVEL = 118\n        }\n    },\n    ORTHEN = {\n        SOIL = { ID = 50696, VB = 9578 },\n        VARANUSAUR = {\n            LABEL = "Varanusaur remains",\n            ID = { 119075 },\n            LEVEL = 90\n        },\n        RELIQUARY = {\n            LABEL = "Dragonkin reliquary",\n            ID = { 119077 },\n            LEVEL = 96\n        },\n        COFFIN = {\n            LABEL = "Dragonkin coffin",\n            ID = { 119079 },\n            LEVEL = 99\n        },\n        AUTOPSY = {\n            LABEL = "Autopsy table",\n            ID = { 119081 },\n            LEVEL = 101\n        },\n        EXPERIMENT = {\n            LABEL = "Experiment workbench",\n            ID = { 119083 },\n            LEVEL = 102\n        },\n        AUGHRA = {\n            LABEL = "Aughra remains",\n            ID = { 119085 },\n            LEVEL = 106\n        },\n        MOKSHA = {\n            LABEL = "Moksha device",\n            ID = { 119087 },\n            LEVEL = 108\n        },\n        MINE = {\n            LABEL = "Xolo mine",\n            ID = { 119089 },\n            LEVEL = 113\n        },\n        REMAINS = {\n            LABEL = "Xolo remains",\n            ID = { 119091 },\n            LEVEL = 119\n        },\n        SAURTHEN = {\n            LABEL = "Saurthen debris",\n            ID = { 119093 },\n            LEVEL = 120\n        }\n    },\n    SENNTISTEN = {\n        SOIL = { ID = 49517, VB = 9370 },\n        MINISTRY = {\n            LABEL = "Ministry remains",\n            ID = { 121157 },\n            LEVEL = 60\n        },\n        CATHEDRAL = {\n            LABEL = "Cathedral debris",\n            ID = { 121155 },\n            LEVEL = 62\n        },\n        MARKETPLACE = {\n            LABEL = "Marketplace debris",\n            ID = { 121159 },\n            LEVEL = 63\n        },\n        INQUISITOR = {\n            LABEL = "Inquisitor remains",\n            ID = { 121161 },\n            LEVEL = 64\n        },\n        GLADIATOR = {\n            LABEL = "Gladiator remains",\n            ID = { 121165 },\n            LEVEL = 66\n        },\n        CITIZEN = {\n            LABEL = "Citizen remains",\n            ID = { 121163 },\n            LEVEL = 67\n        }\n    },\n    STORMGUARD = {\n        SOIL = { ID = 49523, VB = 9373 },\n        IKOVIAN = {\n            LABEL = "Ikovian memorial",\n            ID = { 117202 },\n            LEVEL = 70\n        },\n        KESHIK = {\n            LABEL = "Keshik ger",\n            ID = { 117204 },\n            LEVEL = 76\n        },\n        TAILORY = {\n            LABEL = "Tailory debris",\n            ID = { 117206 },\n            LEVEL = 81\n        },\n        WEAPONS = {\n            LABEL = "Weapons research debris",\n            ID = { 117208 },\n            LEVEL = 85\n        },\n        GRAVITRON = {\n            LABEL = "Gravitron research debris",\n            ID = { 117210 },\n            LEVEL = 91\n        },\n        TOWER = {\n            LABEL = "Keshik tower debris",\n            ID = { 117214 },\n            LEVEL = 95\n        },\n        GOLEM = {\n            LABEL = "Destroyed golem",\n            ID = { 117216 },\n            LEVEL = 98\n        },\n        RACK = {\n            LABEL = "Keshik weapon rack",\n            ID = { 117218 },\n            LEVEL = 103\n        },\n        FLIGHT = {\n            LABEL = "Flight research debris",\n            ID = { 117212 },\n            LEVEL = 111\n        },\n        AETHERIUM = {\n            LABEL = "Aetherium forge",\n            ID = { 117220 },\n            LEVEL = 112\n        },\n        HOWL = {\n            LABEL = "Howls workshop debris",\n            ID = { 117222 },\n            LEVEL = 118\n        }\n    },\n    WARFORGE = {\n        SOIL = { ID = 49525, VB = 9374 },\n        GLADIATORIAL = {\n            LABEL = "Gladiatorial goblin remains",\n            ID = { 117365 },\n            LEVEL = 76\n        },\n        CRUCIBLE = {\n            LABEL = "Crucible stands debris",\n            ID = { 117367 },\n            LEVEL = 81\n        },\n        DORM = {\n            LABEL = "Goblin dorm debris",\n            ID = { 117371 },\n            LEVEL = 83\n        },\n        BARRICADE = {\n            LABEL = "Barricade",\n            ID = { 117246, 117247 },\n            LEVEL = 83\n        },\n        WAR_GOD = {\n            LABEL = "Big High War God shrine",\n            ID = { 117377 },\n            LEVEL = 89\n        },\n        YUBIUSK = {\n            LABEL = "Yubiusk animal pen",\n            ID = { 117373 },\n            LEVEL = 94\n        },\n        GOBLIN = {\n            LABEL = "Goblin trainee remains",\n            ID = { 117379 },\n            LEVEL = 97\n        },\n        KYJAZ = {\n            LABEL = "Kyzaj champions boudoir",\n            ID = { 117375 },\n            LEVEL = 100\n        },\n        SCRAP = {\n            LABEL = "Warforge scrap pile",\n            ID = { 117381 },\n            LEVEL = 104\n        },\n        RACK = {\n            LABEL = "Warforge weapon rack",\n            ID = { 117383 },\n            LEVEL = 110\n        },\n        BANDOS = {\n            LABEL = "Bandos sanctum debris",\n            ID = { 117369 },\n            LEVEL = 115\n        },\n        PIE = {\n            LABEL = "Makeshift pie oven",\n            ID = { 117385 },\n            LEVEL = 119\n        }\n    }\n}\n\nlocal IDS = {\n    SOILBOX = 49538,\n    AUTOSCREENER = 50161\n}\n\nlocal function filterDigsitesByLevel(digsites, level)\n    local filteredDigsites = {}\n\n    for zone, locations in pairs(digsites) do\n        filteredDigsites[zone] = {}\n        for location, data in pairs(locations) do\n            if type(data) == "table" and data.LEVEL and data.LEVEL <= level then\n                table.insert(filteredDigsites[zone], { [location] = data })\n            end\n        end\n\n        table.sort(filteredDigsites[zone], function(a, b)\n            return a[next(a)].LEVEL > b[next(b)].LEVEL\n        end)\n    end\n    return filteredDigsites\nend\n\n-- Function to filter DIGSITES by IDs\nlocal function filterDigsitesByIds(digsites, idsToFilter)\n    local filteredDigsites = {}\n    for zone, locations in pairs(digsites) do\n        filteredDigsites[zone] = {}\n        for location, data in pairs(locations) do\n            if type(data) == "table" and data.VB then\n                -- ignore soil table\n            elseif type(data) == "table" and data.ID then\n                local filteredIdTable = {}\n                for _, id in ipairs(data.ID) do\n                    if UTILS.tableIncludes(idsToFilter, id) then\n                        table.insert(filteredIdTable, id)\n                    end\n                end\n                if #filteredIdTable > 0 then\n                    local filteredData = { LABEL = data.LABEL, ID = filteredIdTable, LEVEL = data.LEVEL }\n                    table.insert(filteredDigsites[zone], { [location] = filteredData })\n                end\n            end\n        end\n        table.sort(filteredDigsites[zone], function(a, b)\n            return a[next(a)].LEVEL > b[next(b)].LEVEL\n        end)\n    end\n\n    return filteredDigsites\nend\n\nlocal function getFilteredItemIds(filteredDigsites)\n    local ids = {}\n\n    for _, locations in pairs(filteredDigsites) do\n        for _, locationData in ipairs(locations) do\n            for _, data in pairs(locationData) do\n                for _, id in ipairs(data.ID) do\n                    table.insert(ids, id)\n                end\n            end\n        end\n    end\n\n    return ids\nend\n\nlocal function populateDropdown()\n    local filteredHotspots = filterDigsitesByLevel(DIGSITES, API.GetSkillByName("ARCHAEOLOGY").level)\n    -- Get the IDs of the filtered and sorted items\n    local items = {}\n    local filteredItemIds = getFilteredItemIds(filteredHotspots)\n    local found = API.GetAllObjArrayInteract(filteredItemIds, 70, 0)\n\n    local distinct = UTILS.getDistinctByProperty(found, \'Id\')\n    for i = 1, #distinct, 1 do\n        local item = distinct[i]\n        table.insert(items, (item.Id))\n    end\n\n    local foundThingsByLevel = filterDigsitesByIds(DIGSITES, items)\n\n    for zone, locations in pairs(foundThingsByLevel) do\n        for _, locationData in ipairs(locations) do\n            for location, data in pairs(locationData) do\n                table.insert(targets,\n                    { SOIL = DIGSITES[zone].SOIL, LABEL = "Lvl:" .. data.LEVEL .. " - " .. data.LABEL, IDS = data.ID })\n            end\n        end\n    end\n\n    if #targets > 0 then\n        local valueStrings = {}\n        for i = 1, #targets, 1 do\n            local item = targets[i]\n            table.insert(valueStrings, item.LABEL)\n        end\n        imguicombo.stringsArr = valueStrings\n        imguicombo.int_value = 0\n    else\n        API.logWarn(\'No hotspots found in range\')\n    end\n    -- return dropdownValues\nend\n\nlocal function setHotspot()\n    API.logDebug(\'setHotspot\')\n    local currentHotspot = target\n    local selected = imguicombo.stringsArr[imguicombo.int_value + 1]\n    selectedTarget = targets[imguicombo.int_value + 1]\n    if currentHotspot ~= selected then\n        target = selected\n    end\n    imguiCurrentTarget.colour = COLORS.TARGET_SET\n    setTargetBtn.return_click = false\nend\n\nlocal function pauseExcavation()\n    runLoop = false\n    API.logDebug("Excavation paused")\n    imguiExcavate.return_click = false\n    imguiCurrentTarget.colour = COLORS.PAUSED\n    imguiRuntime.colour = COLORS.PAUSED\n    imguiExcavate.box_name = "Excavate"\nend\n\nlocal function startExcavation()\n    API.logDebug("Excavation started")\n    runLoop = true\n    imguiCurrentTarget.colour = COLORS.EXCAVATE\n    imguiRuntime.colour = COLORS.EXCAVATE\n    imguiExcavate.box_name = "Pause"\nend\n\nlocal artifactFoundInterface = {\n    InterfaceComp5.new(1189, 2, -1, -1, 0),\n}\n\nlocal destroyInterface = {\n    InterfaceComp5.new(1183, 11, -1, -1, 0),\n}\n\nlocal function destroyInterfaceFound()\n    local result = API.ScanForInterfaceTest2Get(true, destroyInterface)\n    if #result > 0 then\n        return true\n    else\n        return false\n    end\nend\n\nlocal function artifactFoundInterfacePresent()\n    local result = API.ScanForInterfaceTest2Get(true, artifactFoundInterface)\n    if #result > 0 then\n        return true\n    else\n        return false\n    end\nend\n\nlocal function FindHl(objects, maxdistance, highlight)\n    local objObjs = API.GetAllObjArray1(objects, maxdistance, 0)\n    local hlObjs = API.GetAllObjArray1(highlight, maxdistance, 4)\n    local shiny = {}\n    for i = 0, 2.9, 0.1 do\n        for _, obj in ipairs(objObjs) do\n            for _, hl in ipairs(hlObjs) do\n                if math.abs(obj.Tile_XYZ.x - hl.Tile_XYZ.x) < i and math.abs(obj.Tile_XYZ.y - hl.Tile_XYZ.y) < i then\n                    shiny = obj\n                end\n            end\n        end\n    end\n    return shiny\nend\n\nlocal function depositCart()\n    API.logDebug(\'Inventory is full after using soilbox, trying to deposit: \' .. depositAttempt)\n    depositAttempt = depositAttempt + 1;\n    local cart = API.GetAllObjArrayInteract_str({ cartName }, 60, 0)\n    if #cart > 0 then\n        API.DoAction_Object_string1(0x29, API.OFF_ACT_GeneralObject_route0, { cartName },\n            60, true);\n        UTILS.randomSleep(800)\n        API.WaitUntilMovingEnds()\n        if not API.InvFull_() then\n            depositAttempt = 0\n        end\n    else\n        API.logWarn(\'Didn\\\'t find: "\' .. cartName .. \'" within 60 tiles\')\n    end\nend\n\nlocal function destroyArtifacts()\n    API.logWarn(\'destroy\')\n    local inventory = API.ReadInvArrays33()\n\n    local items = UTILS.getDistinctByProperty(inventory, \'textitem\')\n    for i = 1, #items, 1 do\n        local item = items[i]\n        if string.find(tostring(item.textitem), \'damaged\') then\n            local count = API.InvItemcount_1(item.itemid1)\n            API.logWarn(\'Destroying \' ..  item.textitem)\n            -- API.DoAction_Inventory1(item.itemid1,0,3, API.OFF_ACT_GeneralInterface_route2)\n            API.DoAction_Interface(0x24,item.itemid1,8,item.id1,item.id2,item.id3,API.OFF_ACT_GeneralInterface_route2)\n            -- API.DoAction_Interface(0x24, item.itemid1, 8, 1473, 5, i - 1, API.OFF_ACT_GeneralInterface_route2)\n            UTILS.SleepUntil(destroyInterfaceFound,5,\'Destroying \' ..  item.textitem)\n            if count > 1 then\n            API.DoAction_Interface(0xffffffff,0xffffffff,0,1183,7,-1,API.OFF_ACT_GeneralInterface_Choose_option)\n            else\n                API.DoAction_Interface(0xffffffff,0xffffffff,0,1183,5,-1,API.OFF_ACT_GeneralInterface_Choose_option)\n            end\n            UTILS.randomSleep(800)\n        end\n    end\nend\n\nlocal function dropSoil()\n    if soilBoxFull then\n        local soilCount = API.InvItemcount_1(selectedTarget.SOIL.ID)\n        if soilCount > 0 then\n            API.logDebug(\'Dropping \' .. soilCount .. " soil")\n            for i = 1, soilCount, 1 do\n                API.KeyboardPress2(soilKeybind, 100, 200)\n                UTILS.rangeSleep(50, 10, 100)\n            end\n        end\n    end\n    UTILS.randomSleep(800)\nend\n\nlocal function bank()\n    API.logDebug(\'Going to bank\')\n    API.DoAction_Object_string1(0x5, 80, { "Bank chest" }, 50, false)\n    UTILS.randomSleep(600 * 2)\n    API.WaitUntilMovingEnds()\n    if API.BankOpen2() then\n        API.KeyboardPress2(0x31, 100, 200)\n    end\nend\n\nlocal function goBack()\n    API.logDebug(\'Going back to digsite\')\nend\n\nlocal function fillSoilbox()\n    if API.InvItemFound1(IDS.AUTOSCREENER) then\n        return\n    end\n    if API.InvItemFound1(IDS.SOILBOX) then\n        if API.VB_FindPSett(selectedTarget.SOIL.VB).SumOfstate == soilboxCapacity then\n            soilBoxFull = true\n        else\n            soilBoxFull = false\n            API.logDebug(\'Inventory is full, trying to fill soilbox\')\n            API.KeyboardPress2(soilboxKeybind, 100, 200)\n            UTILS.randomSleep(600)\n        end\n    end\nend\n\nlocal function inventoryCheck()\n    if depositAttempt > 5 then\n        API.logError(\'Inventory still full after depositing 5 times\')\n        runLoop = false\n        pauseExcavation()\n        return false\n    end\n    if API.InvFull_() then\n        local emptySpots = API.Invfreecount_()\n        fillSoilbox()\n        if shouldDestroy then\n            destroyArtifacts()\n        end\n        local spotsAfterFill = API.Invfreecount_()\n        if spotsAfterFill <= emptySpots then\n            depositCart()\n\n            if shouldBank then\n                bank()\n                goBack()\n            end\n        end\n    end\nend\n\nlocal function followTimeSprite(objects)\n    local foundObjects = API.GetAllObjArray1(objects.IDS, 60, 0)\n    local targetIds = {}\n    for i = 1, #foundObjects do\n        local rock = foundObjects[i]\n        table.insert(targetIds, rock.Id)\n    end\n    local sprite = FindHl(targetIds, 60, { 7307 })\n    if not API.ReadPlayerMovin2() then\n        if sprite.Id ~= nil then\n            local spritePos = WPOINT.new(sprite.TileX / 512, sprite.TileY / 512, sprite.TileZ / 512)\n            local distanceF = API.Math_DistanceF(API.PlayerCoordfloat(), sprite.Tile_XYZ)\n            if distanceF > 2 then\n                UTILS.randomSleep(200)\n                if not API.CheckAnim(20) then\n                    API.logInfo("Excavating " .. target)\n                else\n                    API.logInfo("Sprite has moved, chasing it")\n                end\n                API.DoAction_Object2(0x2, API.OFF_ACT_GeneralObject_route0, { sprite.Id }, 60, spritePos)\n                UTILS.randomSleep(1000)\n                API.WaitUntilMovingEnds()\n                return\n            end\n        end\n        if artifactFoundInterfacePresent() then\n            artifactsFound = artifactsFound + 1\n            API.logInfo("Found artifact, excavating again " .. target)\n            API.DoAction_Object1(0x2, API.OFF_ACT_GeneralObject_route0, targetIds, 60)\n            UTILS.randomSleep(800)\n            return\n        end\n        if not API.CheckAnim(40) and not API.InvFull_() then\n            API.logInfo("Excavating " .. target)\n            API.DoAction_Object1(0x2, API.OFF_ACT_GeneralObject_route0, targetIds, 60)\n            UTILS.randomSleep(800)\n        end\n    end\nend\n\nlocal function drawGUI()\n    if imguiTerminate.return_click then\n        terminate()\n    end\n    if imguiExcavate.return_click then\n        if not runLoop then\n            startExcavation()\n        end\n    else\n        if runLoop then\n            pauseExcavation()\n        end\n    end\n    if getTargetBtn.return_click then\n        populateDropdown()\n        getTargetBtn.return_click = false\n    end\n    if not runLoop and setTargetBtn.return_click then\n        setHotspot()\n    end\n    local destroyStatus = imguiDestroy.box_ticked\n    local bankStatus = imguiBank.box_ticked\n\n    if destroyStatus ~= shouldDestroy then\n        shouldDestroy = destroyStatus\n        API.logWarn(\'Destroying artifacts? : \' .. tostring(shouldDestroy))\n        imguiDestroy.tooltip_text = "Destroying: " .. tostring(shouldDestroy)\n    end\n\n    if bankStatus ~= shouldBank then\n        shouldBank = bankStatus\n        API.logWarn(\'Banking artifacts? : \' .. tostring(shouldBank))\n        imguiBank.tooltip_text = "Banking: " .. tostring(shouldBank)\n    end\n\n    API.DrawSquareFilled(imguiBackground)\n    API.DrawBox(setTargetBtn)\n    API.DrawBox(getTargetBtn)\n    API.DrawCheckbox(imguiDestroy)\n    API.DrawCheckbox(imguiBank)\n    if (#targets > 0) then\n        API.DrawComboBox(imguicombo, false)\n    end\n    imguiCurrentTarget.string_value = "Current hotspot:" .. target\n    if runLoop then\n        imguiRuntime.string_value = formatElapsedTime(startTime) --os.difftime(os.time(),startTime)\n    end\n    API.DrawBox(imguiExcavate)\n    API.DrawBox(imguiTerminate)\n    API.DrawTextAt(imguiCurrentTarget)\n    API.DrawTextAt(imguiRuntime)\nend\n\n--#endregion\n\n--#region Main loop\nAPI.Write_LoopyLoop(true)\npopulateDropdown()\nwhile (API.Read_LoopyLoop()) do ------------------------------------------------------\n    API.DoRandomEvents()\n    gameStateChecks()\n    idleCheck()\n    drawGUI()\n    if runLoop and selectedTarget ~= nil then\n        inventoryCheck()\n        dropSoil()\n        followTimeSprite(selectedTarget)\n    end\n    UTILS.randomSleep(300)\nend ----------------------------------------------------------------------------------\n--#endregion\n'})})}),"\n",(0,i.jsx)(e.admonition,{type:"hidden",children:(0,i.jsx)(e.h2,{id:"credits",children:"Credits"})}),"\n",(0,i.jsx)(r.Z,{title:"Credits",children:(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.h4,{id:"higginshax",children:"HigginsHax"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Contribution - ProgressBar to track XP and runtime"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.h4,{id:"grunstadt",children:"Grunstadt"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Contribution - Soilbox varbits"}),"\n"]}),"\n"]}),"\n"]})})]})}function E(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(g,{...n})}):g(n)}}}]);